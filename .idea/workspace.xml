<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="4ca83f96-ae3d-435f-b943-93df6023d251" name="Changes" comment="Key Changes:&#10;&#10;Added functionality to handle castling moves for the king, including updating the positions of the king and the relevant rook on the board.&#10;Introduced an Attackable interface to streamline the attack checks for different pieces, enhancing the clarity and efficiency of the code, especially for determining legal moves and check conditions.&#10;Refactored the ChessBoard and piece classes to utilize the Attackable interface, reducing unnecessary recursion and preventing stack overflow errors previously encountered in deep recursion scenarios.&#10;Updated unit tests to cover the new castling functionality, ensuring that all possible castling moves are correctly identified and executed on the board. Adjusted existing tests to align with the refactored code structure.&#10;&#10;Bug Fixes:&#10;&#10;Resolved a stack overflow error by eliminating deep recursion in the check/checkmate logic, which was caused by repeated checks for legal moves and attack possibilities.&#10;Fixed incorrect calculation of legal moves that previously allowed illegal moves in certain scenarios, particularly related to the king's movements and the enforcement of check conditions.&#10;&#10;Tests:&#10;&#10;All unit tests related to castling, pawn promotion, en passant, and standard piece movements have passed successfully.&#10;Comprehensive testing was conducted to ensure no regression in the game's logic and that all special moves are executed according to chess rules.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/kotlin/api/ChessPieces.kt" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/kotlin/api/ChessPieces.kt" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/kotlin/models/ChessBoardViewModel.kt" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/kotlin/models/ChessBoardViewModel.kt" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="zenith-chess" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="zenith-chess" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="zenith-chess" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
                <item name="build" type="c8890929:TasksNode$1" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Kotlin File" />
        <option value="Kotlin Class" />
        <option value="Kotlin Object" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="pawn-promotion-added" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;its-jackson&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">
    <option name="recentNewPullRequestHead">
      <RepoCoordinatesHolder>
        <option name="owner" value="its-jackson" />
        <option name="repository" value="zenith-chess" />
      </RepoCoordinatesHolder>
    </option>
    <option name="selectedUrlAndAccountId">
      <UrlAndAccount>
        <option name="accountId" value="e451e28e-0134-41af-8dfa-882e8eef0fc3" />
        <option name="url" value="https://github.com/its-jackson/zenith-chess.git" />
      </UrlAndAccount>
    </option>
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 4
}</component>
  <component name="ProjectId" id="2cGx4XGuLotZKijA95lJ3HBXpYv" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Gradle.Build chess-ai.executor": "Run",
    "Gradle.Build zenith-chess.executor": "Run",
    "Gradle.ChessBoardSpecialMoveTest.executor": "Run",
    "Gradle.ChessBoardSpecialMoveTest.test en passant move is possible.executor": "Run",
    "Gradle.ChessBoardSpecialMoveTest.test pawn promotion move is possible.executor": "Run",
    "Gradle.ChessBoardTest.executor": "Run",
    "Gradle.ChessBoardTest.test en passant move is possible.executor": "Run",
    "Gradle.Preview: MainKt.App.executor": "Run",
    "Gradle.zenith-chess [build].executor": "Run",
    "Kotlin.MainKt.executor": "Run",
    "RunOnceActivity.OpenProjectViewOnStart": "true",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
    "full.screen.before.presentation.mode": "false",
    "git-widget-placeholder": "castling-special-move-added",
    "ignore.virus.scanning.warn.message": "true",
    "kotlin-language-version-configured": "true",
    "last_opened_file_path": "C:/Users/jacks/Documents/zenith-chess",
    "project.structure.last.edited": "Project",
    "project.structure.proportion": "0.0",
    "project.structure.side.proportion": "0.55172414",
    "settings.editor.selected.configurable": "reference.settingsdialog.project.gradle"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="C:\Users\jacks\Documents\zenith-chess\src\main\resources" />
      <recent name="C:\Users\jacks\Documents\chess-ai\src\main\kotlin\api" />
      <recent name="C:\Users\jacks\Documents\chess-ai\src\main\kotlin\composables" />
      <recent name="C:\Users\jacks\Documents\chess-ai\src\main\resources" />
    </key>
    <key name="MoveKotlinTopLevelDeclarationsDialog.RECENTS_KEY">
      <recent name="api" />
    </key>
  </component>
  <component name="RunManager" selected="Kotlin.MainKt">
    <configuration name="ChessBoardSpecialMoveTest" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;ChessBoardSpecialMoveTest&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>true</RunAsTest>
      <method v="2" />
    </configuration>
    <configuration name="ChessBoardSpecialMoveTest.test en passant move is possible" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;ChessBoardSpecialMoveTest.test en passant move is possible&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>true</RunAsTest>
      <method v="2" />
    </configuration>
    <configuration name="ChessBoardSpecialMoveTest.test pawn promotion move is possible" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;ChessBoardSpecialMoveTest.test pawn promotion move is possible&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>true</RunAsTest>
      <method v="2" />
    </configuration>
    <configuration name="zenith-chess [build]" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value="build" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>true</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>false</RunAsTest>
      <method v="2" />
    </configuration>
    <configuration name="MainKt" type="JetRunConfigurationType" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="MainKt" />
      <module name="zenith-chess.main" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Kotlin.MainKt" />
        <item itemvalue="Gradle.zenith-chess [build]" />
        <item itemvalue="Gradle.ChessBoardSpecialMoveTest" />
        <item itemvalue="Gradle.ChessBoardSpecialMoveTest.test pawn promotion move is possible" />
        <item itemvalue="Gradle.ChessBoardSpecialMoveTest.test en passant move is possible" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="4ca83f96-ae3d-435f-b943-93df6023d251" name="Changes" comment="" />
      <created>1707751526559</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1707751526559</updated>
    </task>
    <task id="LOCAL-00001" summary="Initial commit">
      <option name="closed" value="true" />
      <created>1708181758422</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1708181758422</updated>
    </task>
    <task id="LOCAL-00002" summary="Add gradle task to automate version and name. &#10;&#10;Fix pawn movement.">
      <option name="closed" value="true" />
      <created>1708194266482</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1708194266482</updated>
    </task>
    <task id="LOCAL-00003" summary="Add chess state functionality and create/update ChessPieces.kt">
      <option name="closed" value="true" />
      <created>1708300849971</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1708300849971</updated>
    </task>
    <task id="LOCAL-00004" summary="Add chess state functionality and create/update ChessPieces.kt">
      <option name="closed" value="true" />
      <created>1708300995820</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1708300995820</updated>
    </task>
    <task id="LOCAL-00005" summary="Clean up lots of magic numbers, added en passant special move.">
      <option name="closed" value="true" />
      <created>1708387326252</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1708387326252</updated>
    </task>
    <task id="LOCAL-00006" summary="Added pawn promotion logic with junit tests that have passed fully for validation.">
      <option name="closed" value="true" />
      <created>1708449432453</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1708449432453</updated>
    </task>
    <task id="LOCAL-00007" summary="Key Changes:&#10;&#10;Added functionality to handle castling moves for the king, including updating the positions of the king and the relevant rook on the board.&#10;Introduced an Attackable interface to streamline the attack checks for different pieces, enhancing the clarity and efficiency of the code, especially for determining legal moves and check conditions.&#10;Refactored the ChessBoard and piece classes to utilize the Attackable interface, reducing unnecessary recursion and preventing stack overflow errors previously encountered in deep recursion scenarios.&#10;Updated unit tests to cover the new castling functionality, ensuring that all possible castling moves are correctly identified and executed on the board. Adjusted existing tests to align with the refactored code structure.&#10;&#10;Bug Fixes:&#10;&#10;Resolved a stack overflow error by eliminating deep recursion in the check/checkmate logic, which was caused by repeated checks for legal moves and attack possibilities.&#10;Fixed incorrect calculation of legal moves that previously allowed illegal moves in certain scenarios, particularly related to the king's movements and the enforcement of check conditions.&#10;&#10;Tests:&#10;&#10;All unit tests related to castling, pawn promotion, en passant, and standard piece movements have passed successfully.&#10;Comprehensive testing was conducted to ensure no regression in the game's logic and that all special moves are executed according to chess rules.">
      <option name="closed" value="true" />
      <created>1708564563762</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1708564563762</updated>
    </task>
    <option name="localTasksCounter" value="8" />
    <servers />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="Initial commit" />
    <MESSAGE value="Add gradle task to automate version and name. &#10;&#10;Fix pawn movement." />
    <MESSAGE value="Add chess state functionality and create/update ChessPieces.kt" />
    <MESSAGE value="Clean up lots of magic numbers, added en passant special move." />
    <MESSAGE value="Added pawn promotion logic with junit tests that have passed fully for validation." />
    <MESSAGE value="Key Changes:&#10;&#10;Added functionality to handle castling moves for the king, including updating the positions of the king and the relevant rook on the board.&#10;Introduced an Attackable interface to streamline the attack checks for different pieces, enhancing the clarity and efficiency of the code, especially for determining legal moves and check conditions.&#10;Refactored the ChessBoard and piece classes to utilize the Attackable interface, reducing unnecessary recursion and preventing stack overflow errors previously encountered in deep recursion scenarios.&#10;Updated unit tests to cover the new castling functionality, ensuring that all possible castling moves are correctly identified and executed on the board. Adjusted existing tests to align with the refactored code structure.&#10;&#10;Bug Fixes:&#10;&#10;Resolved a stack overflow error by eliminating deep recursion in the check/checkmate logic, which was caused by repeated checks for legal moves and attack possibilities.&#10;Fixed incorrect calculation of legal moves that previously allowed illegal moves in certain scenarios, particularly related to the king's movements and the enforcement of check conditions.&#10;&#10;Tests:&#10;&#10;All unit tests related to castling, pawn promotion, en passant, and standard piece movements have passed successfully.&#10;Comprehensive testing was conducted to ensure no regression in the game's logic and that all special moves are executed according to chess rules." />
    <option name="LAST_COMMIT_MESSAGE" value="Key Changes:&#10;&#10;Added functionality to handle castling moves for the king, including updating the positions of the king and the relevant rook on the board.&#10;Introduced an Attackable interface to streamline the attack checks for different pieces, enhancing the clarity and efficiency of the code, especially for determining legal moves and check conditions.&#10;Refactored the ChessBoard and piece classes to utilize the Attackable interface, reducing unnecessary recursion and preventing stack overflow errors previously encountered in deep recursion scenarios.&#10;Updated unit tests to cover the new castling functionality, ensuring that all possible castling moves are correctly identified and executed on the board. Adjusted existing tests to align with the refactored code structure.&#10;&#10;Bug Fixes:&#10;&#10;Resolved a stack overflow error by eliminating deep recursion in the check/checkmate logic, which was caused by repeated checks for legal moves and attack possibilities.&#10;Fixed incorrect calculation of legal moves that previously allowed illegal moves in certain scenarios, particularly related to the king's movements and the enforcement of check conditions.&#10;&#10;Tests:&#10;&#10;All unit tests related to castling, pawn promotion, en passant, and standard piece movements have passed successfully.&#10;Comprehensive testing was conducted to ensure no regression in the game's logic and that all special moves are executed according to chess rules." />
  </component>
</project>